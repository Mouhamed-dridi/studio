// This file is generated by Gemini.
'use server';
/**
 * @fileOverview Password generation AI agent.
 *
 * - generatePassword - A function that handles the password generation process.
 * - GeneratePasswordInput - The input type for the generatePassword function.
 * - GeneratePasswordOutput - The return type for the generatePassword function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GeneratePasswordInputSchema = z.object({
  username: z.string().describe('The username or application name to generate a password for.'),
});
export type GeneratePasswordInput = z.infer<typeof GeneratePasswordInputSchema>;

const GeneratePasswordOutputSchema = z.object({
  password: z.string().describe('The generated password.'),
});
export type GeneratePasswordOutput = z.infer<typeof GeneratePasswordOutputSchema>;

export async function generatePassword(input: GeneratePasswordInput): Promise<GeneratePasswordOutput> {
  return generatePasswordFlow(input);
}

const generatePasswordPrompt = ai.definePrompt({
  name: 'generatePasswordPrompt',
  input: {schema: GeneratePasswordInputSchema},
  output: {schema: GeneratePasswordOutputSchema},
  prompt: `You are a password generation expert. Generate a strong password for the username: {{{username}}}. The password should be at least 12 characters long and include a mix of uppercase letters, lowercase letters, numbers, and symbols. Do not include common patterns or dictionary words.`, 
});

const generatePasswordFlow = ai.defineFlow(
  {
    name: 'generatePasswordFlow',
    inputSchema: GeneratePasswordInputSchema,
    outputSchema: GeneratePasswordOutputSchema,
  },
  async input => {
    const {output} = await generatePasswordPrompt(input);
    return output!;
  }
);
